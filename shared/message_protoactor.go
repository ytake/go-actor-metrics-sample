// Package shared is generated by protoactor-go/protoc-gen-gograin@0.1.0
package shared

import (
	"errors"
	"fmt"
	"log/slog"
	"math"
	"time"

	"github.com/asynkron/protoactor-go/actor"
	"github.com/asynkron/protoactor-go/cluster"
	"google.golang.org/protobuf/proto"
)

var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

var xFizzServiceFactory func() FizzService

// FizzServiceFactory produces a FizzService
func FizzServiceFactory(factory func() FizzService) {
	xFizzServiceFactory = factory
}

// GetFizzServiceGrainClient instantiates a new FizzServiceGrainClient with given Identity
func GetFizzServiceGrainClient(c *cluster.Cluster, id string) *FizzServiceGrainClient {
	if c == nil {
		panic(fmt.Errorf("nil cluster instance"))
	}
	if id == "" {
		panic(fmt.Errorf("empty id"))
	}
	return &FizzServiceGrainClient{Identity: id, cluster: c}
}

// GetFizzServiceKind instantiates a new cluster.Kind for FizzService
func GetFizzServiceKind(opts ...actor.PropsOption) *cluster.Kind {
	props := actor.PropsFromProducer(func() actor.Actor {
		return &FizzServiceActor{
			Timeout: 60 * time.Second,
		}
	}, opts...)
	kind := cluster.NewKind("FizzService", props)
	return kind
}

// GetFizzServiceKind instantiates a new cluster.Kind for FizzService
func NewFizzServiceKind(factory func() FizzService, timeout time.Duration, opts ...actor.PropsOption) *cluster.Kind {
	xFizzServiceFactory = factory
	props := actor.PropsFromProducer(func() actor.Actor {
		return &FizzServiceActor{
			Timeout: timeout,
		}
	}, opts...)
	kind := cluster.NewKind("FizzService", props)
	return kind
}

// FizzService interfaces the services available to the FizzService
type FizzService interface {
	Init(ctx cluster.GrainContext)
	Terminate(ctx cluster.GrainContext)
	ReceiveDefault(ctx cluster.GrainContext)
	SayFizz(*FizzRequest, cluster.GrainContext) (*FizzResponse, error)
}

// FizzServiceGrainClient holds the base data for the FizzServiceGrain
type FizzServiceGrainClient struct {
	Identity string
	cluster  *cluster.Cluster
}

// SayFizz requests the execution on to the cluster with CallOptions
func (g *FizzServiceGrainClient) SayFizz(r *FizzRequest, opts ...cluster.GrainCallOption) (*FizzResponse, error) {
	bytes, err := proto.Marshal(r)
	if err != nil {
		return nil, err
	}
	reqMsg := &cluster.GrainRequest{MethodIndex: 0, MessageData: bytes}
	resp, err := g.cluster.Request(g.Identity, "FizzService", reqMsg, opts...)
	if err != nil {
		return nil, err
	}
	switch msg := resp.(type) {
	case *cluster.GrainResponse:
		result := &FizzResponse{}
		err = proto.Unmarshal(msg.MessageData, result)
		if err != nil {
			return nil, err
		}
		return result, nil
	case *cluster.GrainErrorResponse:
		return nil, errors.New(msg.Err)
	default:
		return nil, errors.New("unknown response")
	}
}

// FizzServiceActor represents the actor structure
type FizzServiceActor struct {
	ctx     cluster.GrainContext
	inner   FizzService
	Timeout time.Duration
}

// Receive ensures the lifecycle of the actor for the received message
func (a *FizzServiceActor) Receive(ctx actor.Context) {
	switch msg := ctx.Message().(type) {
	case *actor.Started: //pass
	case *cluster.ClusterInit:
		a.ctx = cluster.NewGrainContext(ctx, msg.Identity, msg.Cluster)
		a.inner = xFizzServiceFactory()
		a.inner.Init(a.ctx)

		if a.Timeout > 0 {
			ctx.SetReceiveTimeout(a.Timeout)
		}
	case *actor.ReceiveTimeout:
		ctx.Poison(ctx.Self())
	case *actor.Stopped:
		a.inner.Terminate(a.ctx)
	case actor.AutoReceiveMessage: // pass
	case actor.SystemMessage: // pass

	case *cluster.GrainRequest:
		switch msg.MethodIndex {
		case 0:
			req := &FizzRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				ctx.Logger().Error("[Grain] SayFizz(FizzRequest) proto.Unmarshal failed.", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			r0, err := a.inner.SayFizz(req, a.ctx)
			if err != nil {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			bytes, err := proto.Marshal(r0)
			if err != nil {
				ctx.Logger().Error("[Grain] SayFizz(FizzRequest) proto.Marshal failed", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			resp := &cluster.GrainResponse{MessageData: bytes}
			ctx.Respond(resp)
		}
	default:
		a.inner.ReceiveDefault(a.ctx)
	}
}

var xBuzzServiceFactory func() BuzzService

// BuzzServiceFactory produces a BuzzService
func BuzzServiceFactory(factory func() BuzzService) {
	xBuzzServiceFactory = factory
}

// GetBuzzServiceGrainClient instantiates a new BuzzServiceGrainClient with given Identity
func GetBuzzServiceGrainClient(c *cluster.Cluster, id string) *BuzzServiceGrainClient {
	if c == nil {
		panic(fmt.Errorf("nil cluster instance"))
	}
	if id == "" {
		panic(fmt.Errorf("empty id"))
	}
	return &BuzzServiceGrainClient{Identity: id, cluster: c}
}

// GetBuzzServiceKind instantiates a new cluster.Kind for BuzzService
func GetBuzzServiceKind(opts ...actor.PropsOption) *cluster.Kind {
	props := actor.PropsFromProducer(func() actor.Actor {
		return &BuzzServiceActor{
			Timeout: 60 * time.Second,
		}
	}, opts...)
	kind := cluster.NewKind("BuzzService", props)
	return kind
}

// GetBuzzServiceKind instantiates a new cluster.Kind for BuzzService
func NewBuzzServiceKind(factory func() BuzzService, timeout time.Duration, opts ...actor.PropsOption) *cluster.Kind {
	xBuzzServiceFactory = factory
	props := actor.PropsFromProducer(func() actor.Actor {
		return &BuzzServiceActor{
			Timeout: timeout,
		}
	}, opts...)
	kind := cluster.NewKind("BuzzService", props)
	return kind
}

// BuzzService interfaces the services available to the BuzzService
type BuzzService interface {
	Init(ctx cluster.GrainContext)
	Terminate(ctx cluster.GrainContext)
	ReceiveDefault(ctx cluster.GrainContext)
	SayBuzz(*BuzzRequest, cluster.GrainContext) (*BuzzResponse, error)
}

// BuzzServiceGrainClient holds the base data for the BuzzServiceGrain
type BuzzServiceGrainClient struct {
	Identity string
	cluster  *cluster.Cluster
}

// SayBuzz requests the execution on to the cluster with CallOptions
func (g *BuzzServiceGrainClient) SayBuzz(r *BuzzRequest, opts ...cluster.GrainCallOption) (*BuzzResponse, error) {
	bytes, err := proto.Marshal(r)
	if err != nil {
		return nil, err
	}
	reqMsg := &cluster.GrainRequest{MethodIndex: 0, MessageData: bytes}
	resp, err := g.cluster.Request(g.Identity, "BuzzService", reqMsg, opts...)
	if err != nil {
		return nil, err
	}
	switch msg := resp.(type) {
	case *cluster.GrainResponse:
		result := &BuzzResponse{}
		err = proto.Unmarshal(msg.MessageData, result)
		if err != nil {
			return nil, err
		}
		return result, nil
	case *cluster.GrainErrorResponse:
		return nil, errors.New(msg.Err)
	default:
		return nil, errors.New("unknown response")
	}
}

// BuzzServiceActor represents the actor structure
type BuzzServiceActor struct {
	ctx     cluster.GrainContext
	inner   BuzzService
	Timeout time.Duration
}

// Receive ensures the lifecycle of the actor for the received message
func (a *BuzzServiceActor) Receive(ctx actor.Context) {
	switch msg := ctx.Message().(type) {
	case *actor.Started: //pass
	case *cluster.ClusterInit:
		a.ctx = cluster.NewGrainContext(ctx, msg.Identity, msg.Cluster)
		a.inner = xBuzzServiceFactory()
		a.inner.Init(a.ctx)

		if a.Timeout > 0 {
			ctx.SetReceiveTimeout(a.Timeout)
		}
	case *actor.ReceiveTimeout:
		ctx.Poison(ctx.Self())
	case *actor.Stopped:
		a.inner.Terminate(a.ctx)
	case actor.AutoReceiveMessage: // pass
	case actor.SystemMessage: // pass

	case *cluster.GrainRequest:
		switch msg.MethodIndex {
		case 0:
			req := &BuzzRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				ctx.Logger().Error("[Grain] SayBuzz(BuzzRequest) proto.Unmarshal failed.", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			r0, err := a.inner.SayBuzz(req, a.ctx)
			if err != nil {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			bytes, err := proto.Marshal(r0)
			if err != nil {
				ctx.Logger().Error("[Grain] SayBuzz(BuzzRequest) proto.Marshal failed", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			resp := &cluster.GrainResponse{MessageData: bytes}
			ctx.Respond(resp)
		}
	default:
		a.inner.ReceiveDefault(a.ctx)
	}
}
